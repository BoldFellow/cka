#--------------Secrets--------------#

# Secrets are similar to ConfigMaps but are specifically intended for confidential data.
# Kubernetes encodes Secret data in base64 by default, but this is not encryption - it's just encoding.

# Types of Secrets:

# Opaque (generic): The default type for arbitrary user-defined data.
# kubernetes.io/service-account-token: Used for service account tokens.
# kubernetes.io/dockercfg: For Docker registry credentials.
# kubernetes.io/dockerconfigjson: For Docker registry credentials (newer format).
# kubernetes.io/basic-auth: For basic authentication credentials.
# kubernetes.io/ssh-auth: For SSH authentication credentials.
# kubernetes.io/tls: For TLS client or server certificates.



apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  username: YWRtaW4=  # base64 encoded 'admin'
  password: dDBwLVNlY3JldA==  # base64 encoded 't0p-Secret'

# How to base64 encode

# echo -n 'admin' | base64
# # Output: YWRtaW4=

# echo -n 'my-super-secret-password' | base64
# # Output: bXktc3VwZXItc2VjcmV0LXBhc3N3b3Jk

# How to base64 decode

# echo 'YWRtaW4=' | base64 --decode
# # Output: admin

#--------------Essential commands--------------#

# kubectl create secret generic my-secret --from-literal=username=admin --from-literal=password=t0p-Secret
# kubectl create secret generic my-secret --from-file=./username.txt --from-file=./password.txt


#--------------How to Impplemnt into definition files--------------#


# apiVersion: v1
# kind: Pod
# metadata:
#   name: secret-env-pod
# spec:
#   containers:
#   - name: mycontainer
#     image: redis
#     env:
#       - name: SECRET_USERNAME
#         valueFrom:
#           secretKeyRef:
#             name: mysecret
#             key: username
#       - name: SECRET_PASSWORD
#         valueFrom:
#           secretKeyRef:
#             name: mysecret
#             key: password
#   restartPolicy: Never