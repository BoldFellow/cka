Comprehensive Guide to Network Bridge Management
Introduction to Network Bridges
A network bridge is a Link Layer device which forwards traffic between network segments. It can be used to connect different interfaces on a single host, or to connect multiple physical networks. In the context of containers and Kubernetes, bridges are often used to facilitate communication between containers and the host system.

1. Creating a Network Bridge
Using ip command:

Create a bridge:
ip link add name mybridge type bridge

Bring the bridge up:
ip link set mybridge up

Assign an IP address to the bridge:
ip addr add 192.168.1.1/24 dev mybridge


Using brctl command (legacy method):

Install bridge-utils if not already installed:
apt-get install bridge-utils

Create a bridge:
brctl addbr mybridge

Bring the bridge up:
ip link set mybridge up


2. Connecting Interfaces to the Bridge
Physical Interfaces:

Add a physical interface to the bridge:
ip link set eth0 master mybridge

Remove an interface from the bridge:
ip link set eth0 nomaster


Virtual Interfaces (for containers):

Create a veth pair:
ip link add veth0 type veth peer name veth1

Add one end of the veth pair to the bridge:
ip link set veth0 master mybridge

Move the other end to a network namespace (simulating a container):
ip link set veth1 netns <container_netns>


3. Configuring the Bridge
Enable STP (Spanning Tree Protocol):
ip link set mybridge type bridge stp_state 1
Adjust bridge parameters:

Set bridge priority:
ip link set mybridge type bridge priority 16384

Set bridge forward delay:
ip link set mybridge type bridge forward_delay 2


4. Managing Bridge Connections
List bridges and their interfaces:
bridge link show
Show bridge details:
ip -d link show mybridge
Add VLAN filtering:

Enable VLAN filtering on the bridge:
ip link set mybridge type bridge vlan_filtering 1

Add a VLAN to an interface on the bridge:
bridge vlan add vid 100 dev eth0 master


5. Configuring iptables for the Bridge
To allow traffic to flow through the bridge:
iptables -I FORWARD -i mybridge -j ACCEPT
iptables -I FORWARD -o mybridge -j ACCEPT
To enable NAT for containers:
iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -j MASQUERADE

6. Configuring Container Networking with a Bridge

Create a network namespace for the container:
ip netns add container1

Create a veth pair:
ip link add veth0 type veth peer name veth1

Add one end to the bridge:
ip link set veth0 master mybridge

Move the other end to the container namespace:
ip link set veth1 netns container1

Configure the interface in the container:
ip netns exec container1 ip addr add 192.168.1.2/24 dev veth1
ip netns exec container1 ip link set veth1 up

Set the default route in the container:
ip netns exec container1 ip route add default via 192.168.1.1


7. Troubleshooting Bridge Connections

Check bridge status:
ip -d link show mybridge

Check connected interfaces:
bridge link show

Check the forwarding database:
bridge fdb show

Monitor bridge traffic:
tcpdump -i mybridge

Check iptables rules:
iptables -L -v -n


8. Cleaning Up

Remove an interface from the bridge:
ip link set eth0 nomaster

Bring down the bridge:
ip link set mybridge down

Delete the bridge:
ip link delete mybridge type bridge


Kubernetes Context
In Kubernetes, network bridges are often used by CNI plugins to create a network for pods on a node. For example, the bridge CNI plugin creates a Linux bridge and adds container interfaces to it. Understanding how to manually create and manage bridges can be invaluable when troubleshooting Kubernetes networking issues or when implementing custom networking solutions.